/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    pub static mut CLAY__ELEMENT_DEFINITION_LATCH: u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Alignpointer {
    pub c: ::core::ffi::c_char,
    pub x: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Alignpointer"][::core::mem::size_of::<Clay__Alignpointer>() - 16usize];
    ["Alignment of Clay__Alignpointer"][::core::mem::align_of::<Clay__Alignpointer>() - 8usize];
    ["Offset of field: Clay__Alignpointer::c"]
        [::core::mem::offset_of!(Clay__Alignpointer, c) - 0usize];
    ["Offset of field: Clay__Alignpointer::x"]
        [::core::mem::offset_of!(Clay__Alignpointer, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Alignbool {
    pub c: ::core::ffi::c_char,
    pub x: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Alignbool"][::core::mem::size_of::<Clay__Alignbool>() - 2usize];
    ["Alignment of Clay__Alignbool"][::core::mem::align_of::<Clay__Alignbool>() - 1usize];
    ["Offset of field: Clay__Alignbool::c"][::core::mem::offset_of!(Clay__Alignbool, c) - 0usize];
    ["Offset of field: Clay__Alignbool::x"][::core::mem::offset_of!(Clay__Alignbool, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Alignuint8_t {
    pub c: ::core::ffi::c_char,
    pub x: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Alignuint8_t"][::core::mem::size_of::<Clay__Alignuint8_t>() - 2usize];
    ["Alignment of Clay__Alignuint8_t"][::core::mem::align_of::<Clay__Alignuint8_t>() - 1usize];
    ["Offset of field: Clay__Alignuint8_t::c"]
        [::core::mem::offset_of!(Clay__Alignuint8_t, c) - 0usize];
    ["Offset of field: Clay__Alignuint8_t::x"]
        [::core::mem::offset_of!(Clay__Alignuint8_t, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Alignint32_t {
    pub c: ::core::ffi::c_char,
    pub x: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Alignint32_t"][::core::mem::size_of::<Clay__Alignint32_t>() - 8usize];
    ["Alignment of Clay__Alignint32_t"][::core::mem::align_of::<Clay__Alignint32_t>() - 4usize];
    ["Offset of field: Clay__Alignint32_t::c"]
        [::core::mem::offset_of!(Clay__Alignint32_t, c) - 0usize];
    ["Offset of field: Clay__Alignint32_t::x"]
        [::core::mem::offset_of!(Clay__Alignint32_t, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_String {
    pub length: i32,
    pub chars: *const ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_String"][::core::mem::size_of::<Clay_String>() - 16usize];
    ["Alignment of Clay_String"][::core::mem::align_of::<Clay_String>() - 8usize];
    ["Offset of field: Clay_String::length"][::core::mem::offset_of!(Clay_String, length) - 0usize];
    ["Offset of field: Clay_String::chars"][::core::mem::offset_of!(Clay_String, chars) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_String {
    pub c: ::core::ffi::c_char,
    pub x: Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_String"][::core::mem::size_of::<Clay__AlignClay_String>() - 24usize];
    ["Alignment of Clay__AlignClay_String"]
        [::core::mem::align_of::<Clay__AlignClay_String>() - 8usize];
    ["Offset of field: Clay__AlignClay_String::c"]
        [::core::mem::offset_of!(Clay__AlignClay_String, c) - 0usize];
    ["Offset of field: Clay__AlignClay_String::x"]
        [::core::mem::offset_of!(Clay__AlignClay_String, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_StringWrapper {
    pub wrapped: Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_StringWrapper"]
        [::core::mem::size_of::<Clay__Clay_StringWrapper>() - 16usize];
    ["Alignment of Clay__Clay_StringWrapper"]
        [::core::mem::align_of::<Clay__Clay_StringWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_StringWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_StringWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__StringArray {
    pub capacity: i32,
    pub length: i32,
    pub internalArray: *mut Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__StringArray"][::core::mem::size_of::<Clay__StringArray>() - 16usize];
    ["Alignment of Clay__StringArray"][::core::mem::align_of::<Clay__StringArray>() - 8usize];
    ["Offset of field: Clay__StringArray::capacity"]
        [::core::mem::offset_of!(Clay__StringArray, capacity) - 0usize];
    ["Offset of field: Clay__StringArray::length"]
        [::core::mem::offset_of!(Clay__StringArray, length) - 4usize];
    ["Offset of field: Clay__StringArray::internalArray"]
        [::core::mem::offset_of!(Clay__StringArray, internalArray) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay__StringArray {
    pub c: ::core::ffi::c_char,
    pub x: Clay__StringArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay__StringArray"]
        [::core::mem::size_of::<Clay__AlignClay__StringArray>() - 24usize];
    ["Alignment of Clay__AlignClay__StringArray"]
        [::core::mem::align_of::<Clay__AlignClay__StringArray>() - 8usize];
    ["Offset of field: Clay__AlignClay__StringArray::c"]
        [::core::mem::offset_of!(Clay__AlignClay__StringArray, c) - 0usize];
    ["Offset of field: Clay__AlignClay__StringArray::x"]
        [::core::mem::offset_of!(Clay__AlignClay__StringArray, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay__StringArrayWrapper {
    pub wrapped: Clay__StringArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay__StringArrayWrapper"]
        [::core::mem::size_of::<Clay__Clay__StringArrayWrapper>() - 16usize];
    ["Alignment of Clay__Clay__StringArrayWrapper"]
        [::core::mem::align_of::<Clay__Clay__StringArrayWrapper>() - 8usize];
    ["Offset of field: Clay__Clay__StringArrayWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay__StringArrayWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_StringSlice {
    pub length: i32,
    pub chars: *const ::core::ffi::c_char,
    pub baseChars: *const ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_StringSlice"][::core::mem::size_of::<Clay_StringSlice>() - 24usize];
    ["Alignment of Clay_StringSlice"][::core::mem::align_of::<Clay_StringSlice>() - 8usize];
    ["Offset of field: Clay_StringSlice::length"]
        [::core::mem::offset_of!(Clay_StringSlice, length) - 0usize];
    ["Offset of field: Clay_StringSlice::chars"]
        [::core::mem::offset_of!(Clay_StringSlice, chars) - 8usize];
    ["Offset of field: Clay_StringSlice::baseChars"]
        [::core::mem::offset_of!(Clay_StringSlice, baseChars) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_StringSlice {
    pub c: ::core::ffi::c_char,
    pub x: Clay_StringSlice,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_StringSlice"]
        [::core::mem::size_of::<Clay__AlignClay_StringSlice>() - 32usize];
    ["Alignment of Clay__AlignClay_StringSlice"]
        [::core::mem::align_of::<Clay__AlignClay_StringSlice>() - 8usize];
    ["Offset of field: Clay__AlignClay_StringSlice::c"]
        [::core::mem::offset_of!(Clay__AlignClay_StringSlice, c) - 0usize];
    ["Offset of field: Clay__AlignClay_StringSlice::x"]
        [::core::mem::offset_of!(Clay__AlignClay_StringSlice, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_StringSliceWrapper {
    pub wrapped: Clay_StringSlice,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_StringSliceWrapper"]
        [::core::mem::size_of::<Clay__Clay_StringSliceWrapper>() - 24usize];
    ["Alignment of Clay__Clay_StringSliceWrapper"]
        [::core::mem::align_of::<Clay__Clay_StringSliceWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_StringSliceWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_StringSliceWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Arena {
    pub nextAllocation: usize,
    pub capacity: usize,
    pub memory: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Arena"][::core::mem::size_of::<Clay_Arena>() - 24usize];
    ["Alignment of Clay_Arena"][::core::mem::align_of::<Clay_Arena>() - 8usize];
    ["Offset of field: Clay_Arena::nextAllocation"]
        [::core::mem::offset_of!(Clay_Arena, nextAllocation) - 0usize];
    ["Offset of field: Clay_Arena::capacity"]
        [::core::mem::offset_of!(Clay_Arena, capacity) - 8usize];
    ["Offset of field: Clay_Arena::memory"][::core::mem::offset_of!(Clay_Arena, memory) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Arena {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Arena,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Arena"][::core::mem::size_of::<Clay__AlignClay_Arena>() - 32usize];
    ["Alignment of Clay__AlignClay_Arena"]
        [::core::mem::align_of::<Clay__AlignClay_Arena>() - 8usize];
    ["Offset of field: Clay__AlignClay_Arena::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Arena, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Arena::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Arena, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ArenaWrapper {
    pub wrapped: Clay_Arena,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ArenaWrapper"]
        [::core::mem::size_of::<Clay__Clay_ArenaWrapper>() - 24usize];
    ["Alignment of Clay__Clay_ArenaWrapper"]
        [::core::mem::align_of::<Clay__Clay_ArenaWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ArenaWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ArenaWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Dimensions {
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Dimensions"][::core::mem::size_of::<Clay_Dimensions>() - 8usize];
    ["Alignment of Clay_Dimensions"][::core::mem::align_of::<Clay_Dimensions>() - 4usize];
    ["Offset of field: Clay_Dimensions::width"]
        [::core::mem::offset_of!(Clay_Dimensions, width) - 0usize];
    ["Offset of field: Clay_Dimensions::height"]
        [::core::mem::offset_of!(Clay_Dimensions, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Dimensions {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Dimensions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Dimensions"]
        [::core::mem::size_of::<Clay__AlignClay_Dimensions>() - 12usize];
    ["Alignment of Clay__AlignClay_Dimensions"]
        [::core::mem::align_of::<Clay__AlignClay_Dimensions>() - 4usize];
    ["Offset of field: Clay__AlignClay_Dimensions::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Dimensions, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Dimensions::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Dimensions, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_DimensionsWrapper {
    pub wrapped: Clay_Dimensions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_DimensionsWrapper"]
        [::core::mem::size_of::<Clay__Clay_DimensionsWrapper>() - 8usize];
    ["Alignment of Clay__Clay_DimensionsWrapper"]
        [::core::mem::align_of::<Clay__Clay_DimensionsWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_DimensionsWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_DimensionsWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Vector2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Vector2"][::core::mem::size_of::<Clay_Vector2>() - 8usize];
    ["Alignment of Clay_Vector2"][::core::mem::align_of::<Clay_Vector2>() - 4usize];
    ["Offset of field: Clay_Vector2::x"][::core::mem::offset_of!(Clay_Vector2, x) - 0usize];
    ["Offset of field: Clay_Vector2::y"][::core::mem::offset_of!(Clay_Vector2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Vector2 {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Vector2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Vector2"]
        [::core::mem::size_of::<Clay__AlignClay_Vector2>() - 12usize];
    ["Alignment of Clay__AlignClay_Vector2"]
        [::core::mem::align_of::<Clay__AlignClay_Vector2>() - 4usize];
    ["Offset of field: Clay__AlignClay_Vector2::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Vector2, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Vector2::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Vector2, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_Vector2Wrapper {
    pub wrapped: Clay_Vector2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_Vector2Wrapper"]
        [::core::mem::size_of::<Clay__Clay_Vector2Wrapper>() - 8usize];
    ["Alignment of Clay__Clay_Vector2Wrapper"]
        [::core::mem::align_of::<Clay__Clay_Vector2Wrapper>() - 4usize];
    ["Offset of field: Clay__Clay_Vector2Wrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_Vector2Wrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Color"][::core::mem::size_of::<Clay_Color>() - 16usize];
    ["Alignment of Clay_Color"][::core::mem::align_of::<Clay_Color>() - 4usize];
    ["Offset of field: Clay_Color::r"][::core::mem::offset_of!(Clay_Color, r) - 0usize];
    ["Offset of field: Clay_Color::g"][::core::mem::offset_of!(Clay_Color, g) - 4usize];
    ["Offset of field: Clay_Color::b"][::core::mem::offset_of!(Clay_Color, b) - 8usize];
    ["Offset of field: Clay_Color::a"][::core::mem::offset_of!(Clay_Color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Color {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Color"][::core::mem::size_of::<Clay__AlignClay_Color>() - 20usize];
    ["Alignment of Clay__AlignClay_Color"]
        [::core::mem::align_of::<Clay__AlignClay_Color>() - 4usize];
    ["Offset of field: Clay__AlignClay_Color::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Color, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Color::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Color, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ColorWrapper {
    pub wrapped: Clay_Color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ColorWrapper"]
        [::core::mem::size_of::<Clay__Clay_ColorWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ColorWrapper"]
        [::core::mem::align_of::<Clay__Clay_ColorWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_ColorWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ColorWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BoundingBox {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BoundingBox"][::core::mem::size_of::<Clay_BoundingBox>() - 16usize];
    ["Alignment of Clay_BoundingBox"][::core::mem::align_of::<Clay_BoundingBox>() - 4usize];
    ["Offset of field: Clay_BoundingBox::x"][::core::mem::offset_of!(Clay_BoundingBox, x) - 0usize];
    ["Offset of field: Clay_BoundingBox::y"][::core::mem::offset_of!(Clay_BoundingBox, y) - 4usize];
    ["Offset of field: Clay_BoundingBox::width"]
        [::core::mem::offset_of!(Clay_BoundingBox, width) - 8usize];
    ["Offset of field: Clay_BoundingBox::height"]
        [::core::mem::offset_of!(Clay_BoundingBox, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_BoundingBox {
    pub c: ::core::ffi::c_char,
    pub x: Clay_BoundingBox,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_BoundingBox"]
        [::core::mem::size_of::<Clay__AlignClay_BoundingBox>() - 20usize];
    ["Alignment of Clay__AlignClay_BoundingBox"]
        [::core::mem::align_of::<Clay__AlignClay_BoundingBox>() - 4usize];
    ["Offset of field: Clay__AlignClay_BoundingBox::c"]
        [::core::mem::offset_of!(Clay__AlignClay_BoundingBox, c) - 0usize];
    ["Offset of field: Clay__AlignClay_BoundingBox::x"]
        [::core::mem::offset_of!(Clay__AlignClay_BoundingBox, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_BoundingBoxWrapper {
    pub wrapped: Clay_BoundingBox,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_BoundingBoxWrapper"]
        [::core::mem::size_of::<Clay__Clay_BoundingBoxWrapper>() - 16usize];
    ["Alignment of Clay__Clay_BoundingBoxWrapper"]
        [::core::mem::align_of::<Clay__Clay_BoundingBoxWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_BoundingBoxWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_BoundingBoxWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementId {
    pub id: u32,
    pub offset: u32,
    pub baseId: u32,
    pub stringId: Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementId"][::core::mem::size_of::<Clay_ElementId>() - 32usize];
    ["Alignment of Clay_ElementId"][::core::mem::align_of::<Clay_ElementId>() - 8usize];
    ["Offset of field: Clay_ElementId::id"][::core::mem::offset_of!(Clay_ElementId, id) - 0usize];
    ["Offset of field: Clay_ElementId::offset"]
        [::core::mem::offset_of!(Clay_ElementId, offset) - 4usize];
    ["Offset of field: Clay_ElementId::baseId"]
        [::core::mem::offset_of!(Clay_ElementId, baseId) - 8usize];
    ["Offset of field: Clay_ElementId::stringId"]
        [::core::mem::offset_of!(Clay_ElementId, stringId) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ElementId {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ElementId,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ElementId"]
        [::core::mem::size_of::<Clay__AlignClay_ElementId>() - 40usize];
    ["Alignment of Clay__AlignClay_ElementId"]
        [::core::mem::align_of::<Clay__AlignClay_ElementId>() - 8usize];
    ["Offset of field: Clay__AlignClay_ElementId::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementId, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ElementId::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementId, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ElementIdWrapper {
    pub wrapped: Clay_ElementId,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementIdWrapper"]
        [::core::mem::size_of::<Clay__Clay_ElementIdWrapper>() - 32usize];
    ["Alignment of Clay__Clay_ElementIdWrapper"]
        [::core::mem::align_of::<Clay__Clay_ElementIdWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ElementIdWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ElementIdWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CornerRadius {
    pub topLeft: f32,
    pub topRight: f32,
    pub bottomLeft: f32,
    pub bottomRight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CornerRadius"][::core::mem::size_of::<Clay_CornerRadius>() - 16usize];
    ["Alignment of Clay_CornerRadius"][::core::mem::align_of::<Clay_CornerRadius>() - 4usize];
    ["Offset of field: Clay_CornerRadius::topLeft"]
        [::core::mem::offset_of!(Clay_CornerRadius, topLeft) - 0usize];
    ["Offset of field: Clay_CornerRadius::topRight"]
        [::core::mem::offset_of!(Clay_CornerRadius, topRight) - 4usize];
    ["Offset of field: Clay_CornerRadius::bottomLeft"]
        [::core::mem::offset_of!(Clay_CornerRadius, bottomLeft) - 8usize];
    ["Offset of field: Clay_CornerRadius::bottomRight"]
        [::core::mem::offset_of!(Clay_CornerRadius, bottomRight) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_CornerRadius {
    pub c: ::core::ffi::c_char,
    pub x: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_CornerRadius"]
        [::core::mem::size_of::<Clay__AlignClay_CornerRadius>() - 20usize];
    ["Alignment of Clay__AlignClay_CornerRadius"]
        [::core::mem::align_of::<Clay__AlignClay_CornerRadius>() - 4usize];
    ["Offset of field: Clay__AlignClay_CornerRadius::c"]
        [::core::mem::offset_of!(Clay__AlignClay_CornerRadius, c) - 0usize];
    ["Offset of field: Clay__AlignClay_CornerRadius::x"]
        [::core::mem::offset_of!(Clay__AlignClay_CornerRadius, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_CornerRadiusWrapper {
    pub wrapped: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_CornerRadiusWrapper"]
        [::core::mem::size_of::<Clay__Clay_CornerRadiusWrapper>() - 16usize];
    ["Alignment of Clay__Clay_CornerRadiusWrapper"]
        [::core::mem::align_of::<Clay__Clay_CornerRadiusWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_CornerRadiusWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_CornerRadiusWrapper, wrapped) - 0usize];
};
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_NONE: Clay__ElementConfigType = 0;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_RECTANGLE: Clay__ElementConfigType = 1;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_BORDER_CONTAINER:
    Clay__ElementConfigType = 2;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_FLOATING_CONTAINER:
    Clay__ElementConfigType = 4;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_SCROLL_CONTAINER:
    Clay__ElementConfigType = 8;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_IMAGE: Clay__ElementConfigType = 16;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_TEXT: Clay__ElementConfigType = 32;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_CUSTOM: Clay__ElementConfigType = 64;
pub type Clay__ElementConfigType = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay__ElementConfigType {
    pub c: ::core::ffi::c_char,
    pub x: Clay__ElementConfigType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay__ElementConfigType"]
        [::core::mem::size_of::<Clay__AlignClay__ElementConfigType>() - 2usize];
    ["Alignment of Clay__AlignClay__ElementConfigType"]
        [::core::mem::align_of::<Clay__AlignClay__ElementConfigType>() - 1usize];
    ["Offset of field: Clay__AlignClay__ElementConfigType::c"]
        [::core::mem::offset_of!(Clay__AlignClay__ElementConfigType, c) - 0usize];
    ["Offset of field: Clay__AlignClay__ElementConfigType::x"]
        [::core::mem::offset_of!(Clay__AlignClay__ElementConfigType, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay__ElementConfigTypeWrapper {
    pub wrapped: Clay__ElementConfigType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay__ElementConfigTypeWrapper"]
        [::core::mem::size_of::<Clay__Clay__ElementConfigTypeWrapper>() - 1usize];
    ["Alignment of Clay__Clay__ElementConfigTypeWrapper"]
        [::core::mem::align_of::<Clay__Clay__ElementConfigTypeWrapper>() - 1usize];
    ["Offset of field: Clay__Clay__ElementConfigTypeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay__ElementConfigTypeWrapper, wrapped) - 0usize];
};
pub const Clay_LayoutDirection_CLAY_LEFT_TO_RIGHT: Clay_LayoutDirection = 0;
pub const Clay_LayoutDirection_CLAY_TOP_TO_BOTTOM: Clay_LayoutDirection = 1;
pub type Clay_LayoutDirection = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_LayoutDirection {
    pub c: ::core::ffi::c_char,
    pub x: Clay_LayoutDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_LayoutDirection"]
        [::core::mem::size_of::<Clay__AlignClay_LayoutDirection>() - 2usize];
    ["Alignment of Clay__AlignClay_LayoutDirection"]
        [::core::mem::align_of::<Clay__AlignClay_LayoutDirection>() - 1usize];
    ["Offset of field: Clay__AlignClay_LayoutDirection::c"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutDirection, c) - 0usize];
    ["Offset of field: Clay__AlignClay_LayoutDirection::x"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutDirection, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_LayoutDirectionWrapper {
    pub wrapped: Clay_LayoutDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutDirectionWrapper"]
        [::core::mem::size_of::<Clay__Clay_LayoutDirectionWrapper>() - 1usize];
    ["Alignment of Clay__Clay_LayoutDirectionWrapper"]
        [::core::mem::align_of::<Clay__Clay_LayoutDirectionWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_LayoutDirectionWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_LayoutDirectionWrapper, wrapped) - 0usize];
};
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_LEFT: Clay_LayoutAlignmentX = 0;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_RIGHT: Clay_LayoutAlignmentX = 1;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_CENTER: Clay_LayoutAlignmentX = 2;
pub type Clay_LayoutAlignmentX = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_LayoutAlignmentX {
    pub c: ::core::ffi::c_char,
    pub x: Clay_LayoutAlignmentX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_LayoutAlignmentX"]
        [::core::mem::size_of::<Clay__AlignClay_LayoutAlignmentX>() - 2usize];
    ["Alignment of Clay__AlignClay_LayoutAlignmentX"]
        [::core::mem::align_of::<Clay__AlignClay_LayoutAlignmentX>() - 1usize];
    ["Offset of field: Clay__AlignClay_LayoutAlignmentX::c"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutAlignmentX, c) - 0usize];
    ["Offset of field: Clay__AlignClay_LayoutAlignmentX::x"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutAlignmentX, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_LayoutAlignmentXWrapper {
    pub wrapped: Clay_LayoutAlignmentX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutAlignmentXWrapper"]
        [::core::mem::size_of::<Clay__Clay_LayoutAlignmentXWrapper>() - 1usize];
    ["Alignment of Clay__Clay_LayoutAlignmentXWrapper"]
        [::core::mem::align_of::<Clay__Clay_LayoutAlignmentXWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_LayoutAlignmentXWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_LayoutAlignmentXWrapper, wrapped) - 0usize];
};
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_TOP: Clay_LayoutAlignmentY = 0;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_BOTTOM: Clay_LayoutAlignmentY = 1;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_CENTER: Clay_LayoutAlignmentY = 2;
pub type Clay_LayoutAlignmentY = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_LayoutAlignmentY {
    pub c: ::core::ffi::c_char,
    pub x: Clay_LayoutAlignmentY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_LayoutAlignmentY"]
        [::core::mem::size_of::<Clay__AlignClay_LayoutAlignmentY>() - 2usize];
    ["Alignment of Clay__AlignClay_LayoutAlignmentY"]
        [::core::mem::align_of::<Clay__AlignClay_LayoutAlignmentY>() - 1usize];
    ["Offset of field: Clay__AlignClay_LayoutAlignmentY::c"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutAlignmentY, c) - 0usize];
    ["Offset of field: Clay__AlignClay_LayoutAlignmentY::x"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutAlignmentY, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_LayoutAlignmentYWrapper {
    pub wrapped: Clay_LayoutAlignmentY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutAlignmentYWrapper"]
        [::core::mem::size_of::<Clay__Clay_LayoutAlignmentYWrapper>() - 1usize];
    ["Alignment of Clay__Clay_LayoutAlignmentYWrapper"]
        [::core::mem::align_of::<Clay__Clay_LayoutAlignmentYWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_LayoutAlignmentYWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_LayoutAlignmentYWrapper, wrapped) - 0usize];
};
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIT: Clay__SizingType = 0;
pub const Clay__SizingType_CLAY__SIZING_TYPE_GROW: Clay__SizingType = 1;
pub const Clay__SizingType_CLAY__SIZING_TYPE_PERCENT: Clay__SizingType = 2;
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIXED: Clay__SizingType = 3;
pub type Clay__SizingType = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay__SizingType {
    pub c: ::core::ffi::c_char,
    pub x: Clay__SizingType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay__SizingType"]
        [::core::mem::size_of::<Clay__AlignClay__SizingType>() - 2usize];
    ["Alignment of Clay__AlignClay__SizingType"]
        [::core::mem::align_of::<Clay__AlignClay__SizingType>() - 1usize];
    ["Offset of field: Clay__AlignClay__SizingType::c"]
        [::core::mem::offset_of!(Clay__AlignClay__SizingType, c) - 0usize];
    ["Offset of field: Clay__AlignClay__SizingType::x"]
        [::core::mem::offset_of!(Clay__AlignClay__SizingType, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay__SizingTypeWrapper {
    pub wrapped: Clay__SizingType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay__SizingTypeWrapper"]
        [::core::mem::size_of::<Clay__Clay__SizingTypeWrapper>() - 1usize];
    ["Alignment of Clay__Clay__SizingTypeWrapper"]
        [::core::mem::align_of::<Clay__Clay__SizingTypeWrapper>() - 1usize];
    ["Offset of field: Clay__Clay__SizingTypeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay__SizingTypeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ChildAlignment {
    pub x: Clay_LayoutAlignmentX,
    pub y: Clay_LayoutAlignmentY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ChildAlignment"][::core::mem::size_of::<Clay_ChildAlignment>() - 2usize];
    ["Alignment of Clay_ChildAlignment"][::core::mem::align_of::<Clay_ChildAlignment>() - 1usize];
    ["Offset of field: Clay_ChildAlignment::x"]
        [::core::mem::offset_of!(Clay_ChildAlignment, x) - 0usize];
    ["Offset of field: Clay_ChildAlignment::y"]
        [::core::mem::offset_of!(Clay_ChildAlignment, y) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ChildAlignment {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ChildAlignment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ChildAlignment"]
        [::core::mem::size_of::<Clay__AlignClay_ChildAlignment>() - 3usize];
    ["Alignment of Clay__AlignClay_ChildAlignment"]
        [::core::mem::align_of::<Clay__AlignClay_ChildAlignment>() - 1usize];
    ["Offset of field: Clay__AlignClay_ChildAlignment::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ChildAlignment, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ChildAlignment::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ChildAlignment, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ChildAlignmentWrapper {
    pub wrapped: Clay_ChildAlignment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ChildAlignmentWrapper"]
        [::core::mem::size_of::<Clay__Clay_ChildAlignmentWrapper>() - 2usize];
    ["Alignment of Clay__Clay_ChildAlignmentWrapper"]
        [::core::mem::align_of::<Clay__Clay_ChildAlignmentWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_ChildAlignmentWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ChildAlignmentWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_SizingMinMax {
    pub min: f32,
    pub max: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingMinMax"][::core::mem::size_of::<Clay_SizingMinMax>() - 8usize];
    ["Alignment of Clay_SizingMinMax"][::core::mem::align_of::<Clay_SizingMinMax>() - 4usize];
    ["Offset of field: Clay_SizingMinMax::min"]
        [::core::mem::offset_of!(Clay_SizingMinMax, min) - 0usize];
    ["Offset of field: Clay_SizingMinMax::max"]
        [::core::mem::offset_of!(Clay_SizingMinMax, max) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_SizingMinMax {
    pub c: ::core::ffi::c_char,
    pub x: Clay_SizingMinMax,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_SizingMinMax"]
        [::core::mem::size_of::<Clay__AlignClay_SizingMinMax>() - 12usize];
    ["Alignment of Clay__AlignClay_SizingMinMax"]
        [::core::mem::align_of::<Clay__AlignClay_SizingMinMax>() - 4usize];
    ["Offset of field: Clay__AlignClay_SizingMinMax::c"]
        [::core::mem::offset_of!(Clay__AlignClay_SizingMinMax, c) - 0usize];
    ["Offset of field: Clay__AlignClay_SizingMinMax::x"]
        [::core::mem::offset_of!(Clay__AlignClay_SizingMinMax, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_SizingMinMaxWrapper {
    pub wrapped: Clay_SizingMinMax,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_SizingMinMaxWrapper"]
        [::core::mem::size_of::<Clay__Clay_SizingMinMaxWrapper>() - 8usize];
    ["Alignment of Clay__Clay_SizingMinMaxWrapper"]
        [::core::mem::align_of::<Clay__Clay_SizingMinMaxWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_SizingMinMaxWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_SizingMinMaxWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_SizingAxis {
    pub size: Clay_SizingAxis__bindgen_ty_1,
    pub type_: Clay__SizingType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_SizingAxis__bindgen_ty_1 {
    pub minMax: Clay_SizingMinMax,
    pub percent: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis__bindgen_ty_1"]
        [::core::mem::size_of::<Clay_SizingAxis__bindgen_ty_1>() - 8usize];
    ["Alignment of Clay_SizingAxis__bindgen_ty_1"]
        [::core::mem::align_of::<Clay_SizingAxis__bindgen_ty_1>() - 4usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::minMax"]
        [::core::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, minMax) - 0usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::percent"]
        [::core::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, percent) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis"][::core::mem::size_of::<Clay_SizingAxis>() - 12usize];
    ["Alignment of Clay_SizingAxis"][::core::mem::align_of::<Clay_SizingAxis>() - 4usize];
    ["Offset of field: Clay_SizingAxis::size"]
        [::core::mem::offset_of!(Clay_SizingAxis, size) - 0usize];
    ["Offset of field: Clay_SizingAxis::type_"]
        [::core::mem::offset_of!(Clay_SizingAxis, type_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_SizingAxis {
    pub c: ::core::ffi::c_char,
    pub x: Clay_SizingAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_SizingAxis"]
        [::core::mem::size_of::<Clay__AlignClay_SizingAxis>() - 16usize];
    ["Alignment of Clay__AlignClay_SizingAxis"]
        [::core::mem::align_of::<Clay__AlignClay_SizingAxis>() - 4usize];
    ["Offset of field: Clay__AlignClay_SizingAxis::c"]
        [::core::mem::offset_of!(Clay__AlignClay_SizingAxis, c) - 0usize];
    ["Offset of field: Clay__AlignClay_SizingAxis::x"]
        [::core::mem::offset_of!(Clay__AlignClay_SizingAxis, x) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_SizingAxisWrapper {
    pub wrapped: Clay_SizingAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_SizingAxisWrapper"]
        [::core::mem::size_of::<Clay__Clay_SizingAxisWrapper>() - 12usize];
    ["Alignment of Clay__Clay_SizingAxisWrapper"]
        [::core::mem::align_of::<Clay__Clay_SizingAxisWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_SizingAxisWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_SizingAxisWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_Sizing {
    pub width: Clay_SizingAxis,
    pub height: Clay_SizingAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Sizing"][::core::mem::size_of::<Clay_Sizing>() - 24usize];
    ["Alignment of Clay_Sizing"][::core::mem::align_of::<Clay_Sizing>() - 4usize];
    ["Offset of field: Clay_Sizing::width"][::core::mem::offset_of!(Clay_Sizing, width) - 0usize];
    ["Offset of field: Clay_Sizing::height"]
        [::core::mem::offset_of!(Clay_Sizing, height) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_Sizing {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Sizing,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Sizing"][::core::mem::size_of::<Clay__AlignClay_Sizing>() - 28usize];
    ["Alignment of Clay__AlignClay_Sizing"]
        [::core::mem::align_of::<Clay__AlignClay_Sizing>() - 4usize];
    ["Offset of field: Clay__AlignClay_Sizing::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Sizing, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Sizing::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Sizing, x) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_SizingWrapper {
    pub wrapped: Clay_Sizing,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_SizingWrapper"]
        [::core::mem::size_of::<Clay__Clay_SizingWrapper>() - 24usize];
    ["Alignment of Clay__Clay_SizingWrapper"]
        [::core::mem::align_of::<Clay__Clay_SizingWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_SizingWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_SizingWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Padding {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Padding"][::core::mem::size_of::<Clay_Padding>() - 8usize];
    ["Alignment of Clay_Padding"][::core::mem::align_of::<Clay_Padding>() - 2usize];
    ["Offset of field: Clay_Padding::left"][::core::mem::offset_of!(Clay_Padding, left) - 0usize];
    ["Offset of field: Clay_Padding::right"][::core::mem::offset_of!(Clay_Padding, right) - 2usize];
    ["Offset of field: Clay_Padding::top"][::core::mem::offset_of!(Clay_Padding, top) - 4usize];
    ["Offset of field: Clay_Padding::bottom"]
        [::core::mem::offset_of!(Clay_Padding, bottom) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Padding {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Padding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Padding"]
        [::core::mem::size_of::<Clay__AlignClay_Padding>() - 10usize];
    ["Alignment of Clay__AlignClay_Padding"]
        [::core::mem::align_of::<Clay__AlignClay_Padding>() - 2usize];
    ["Offset of field: Clay__AlignClay_Padding::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Padding, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Padding::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Padding, x) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_PaddingWrapper {
    pub wrapped: Clay_Padding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PaddingWrapper"]
        [::core::mem::size_of::<Clay__Clay_PaddingWrapper>() - 8usize];
    ["Alignment of Clay__Clay_PaddingWrapper"]
        [::core::mem::align_of::<Clay__Clay_PaddingWrapper>() - 2usize];
    ["Offset of field: Clay__Clay_PaddingWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_PaddingWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_LayoutConfig {
    pub sizing: Clay_Sizing,
    pub padding: Clay_Padding,
    pub childGap: u16,
    pub childAlignment: Clay_ChildAlignment,
    pub layoutDirection: Clay_LayoutDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_LayoutConfig"][::core::mem::size_of::<Clay_LayoutConfig>() - 40usize];
    ["Alignment of Clay_LayoutConfig"][::core::mem::align_of::<Clay_LayoutConfig>() - 4usize];
    ["Offset of field: Clay_LayoutConfig::sizing"]
        [::core::mem::offset_of!(Clay_LayoutConfig, sizing) - 0usize];
    ["Offset of field: Clay_LayoutConfig::padding"]
        [::core::mem::offset_of!(Clay_LayoutConfig, padding) - 24usize];
    ["Offset of field: Clay_LayoutConfig::childGap"]
        [::core::mem::offset_of!(Clay_LayoutConfig, childGap) - 32usize];
    ["Offset of field: Clay_LayoutConfig::childAlignment"]
        [::core::mem::offset_of!(Clay_LayoutConfig, childAlignment) - 34usize];
    ["Offset of field: Clay_LayoutConfig::layoutDirection"]
        [::core::mem::offset_of!(Clay_LayoutConfig, layoutDirection) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_LayoutConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_LayoutConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_LayoutConfig"]
        [::core::mem::size_of::<Clay__AlignClay_LayoutConfig>() - 44usize];
    ["Alignment of Clay__AlignClay_LayoutConfig"]
        [::core::mem::align_of::<Clay__AlignClay_LayoutConfig>() - 4usize];
    ["Offset of field: Clay__AlignClay_LayoutConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_LayoutConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_LayoutConfig, x) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_LayoutConfigWrapper {
    pub wrapped: Clay_LayoutConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_LayoutConfigWrapper>() - 40usize];
    ["Alignment of Clay__Clay_LayoutConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_LayoutConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_LayoutConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_LayoutConfigWrapper, wrapped) - 0usize];
};
unsafe extern "C" {
    pub static mut CLAY_LAYOUT_DEFAULT: Clay_LayoutConfig;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RectangleElementConfig {
    pub color: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RectangleElementConfig"]
        [::core::mem::size_of::<Clay_RectangleElementConfig>() - 32usize];
    ["Alignment of Clay_RectangleElementConfig"]
        [::core::mem::align_of::<Clay_RectangleElementConfig>() - 4usize];
    ["Offset of field: Clay_RectangleElementConfig::color"]
        [::core::mem::offset_of!(Clay_RectangleElementConfig, color) - 0usize];
    ["Offset of field: Clay_RectangleElementConfig::cornerRadius"]
        [::core::mem::offset_of!(Clay_RectangleElementConfig, cornerRadius) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_RectangleElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_RectangleElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_RectangleElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_RectangleElementConfig>() - 36usize];
    ["Alignment of Clay__AlignClay_RectangleElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_RectangleElementConfig>() - 4usize];
    ["Offset of field: Clay__AlignClay_RectangleElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_RectangleElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_RectangleElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_RectangleElementConfig, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_RectangleElementConfigWrapper {
    pub wrapped: Clay_RectangleElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_RectangleElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_RectangleElementConfigWrapper>() - 32usize];
    ["Alignment of Clay__Clay_RectangleElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_RectangleElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_RectangleElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_RectangleElementConfigWrapper, wrapped) - 0usize];
};
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_WORDS: Clay_TextElementConfigWrapMode = 0;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NEWLINES: Clay_TextElementConfigWrapMode =
    1;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NONE: Clay_TextElementConfigWrapMode = 2;
pub type Clay_TextElementConfigWrapMode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_TextElementConfigWrapMode {
    pub c: ::core::ffi::c_char,
    pub x: Clay_TextElementConfigWrapMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_TextElementConfigWrapMode"]
        [::core::mem::size_of::<Clay__AlignClay_TextElementConfigWrapMode>() - 8usize];
    ["Alignment of Clay__AlignClay_TextElementConfigWrapMode"]
        [::core::mem::align_of::<Clay__AlignClay_TextElementConfigWrapMode>() - 4usize];
    ["Offset of field: Clay__AlignClay_TextElementConfigWrapMode::c"]
        [::core::mem::offset_of!(Clay__AlignClay_TextElementConfigWrapMode, c) - 0usize];
    ["Offset of field: Clay__AlignClay_TextElementConfigWrapMode::x"]
        [::core::mem::offset_of!(Clay__AlignClay_TextElementConfigWrapMode, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_TextElementConfigWrapModeWrapper {
    pub wrapped: Clay_TextElementConfigWrapMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_TextElementConfigWrapModeWrapper"]
        [::core::mem::size_of::<Clay__Clay_TextElementConfigWrapModeWrapper>() - 4usize];
    ["Alignment of Clay__Clay_TextElementConfigWrapModeWrapper"]
        [::core::mem::align_of::<Clay__Clay_TextElementConfigWrapModeWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_TextElementConfigWrapModeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_TextElementConfigWrapModeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextElementConfig {
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
    pub wrapMode: Clay_TextElementConfigWrapMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_TextElementConfig"][::core::mem::size_of::<Clay_TextElementConfig>() - 28usize];
    ["Alignment of Clay_TextElementConfig"]
        [::core::mem::align_of::<Clay_TextElementConfig>() - 4usize];
    ["Offset of field: Clay_TextElementConfig::textColor"]
        [::core::mem::offset_of!(Clay_TextElementConfig, textColor) - 0usize];
    ["Offset of field: Clay_TextElementConfig::fontId"]
        [::core::mem::offset_of!(Clay_TextElementConfig, fontId) - 16usize];
    ["Offset of field: Clay_TextElementConfig::fontSize"]
        [::core::mem::offset_of!(Clay_TextElementConfig, fontSize) - 18usize];
    ["Offset of field: Clay_TextElementConfig::letterSpacing"]
        [::core::mem::offset_of!(Clay_TextElementConfig, letterSpacing) - 20usize];
    ["Offset of field: Clay_TextElementConfig::lineHeight"]
        [::core::mem::offset_of!(Clay_TextElementConfig, lineHeight) - 22usize];
    ["Offset of field: Clay_TextElementConfig::wrapMode"]
        [::core::mem::offset_of!(Clay_TextElementConfig, wrapMode) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_TextElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_TextElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_TextElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_TextElementConfig>() - 32usize];
    ["Alignment of Clay__AlignClay_TextElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_TextElementConfig>() - 4usize];
    ["Offset of field: Clay__AlignClay_TextElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_TextElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_TextElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_TextElementConfig, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_TextElementConfigWrapper {
    pub wrapped: Clay_TextElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_TextElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_TextElementConfigWrapper>() - 28usize];
    ["Alignment of Clay__Clay_TextElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_TextElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_TextElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_TextElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageElementConfig {
    pub imageData: *mut ::core::ffi::c_void,
    pub sourceDimensions: Clay_Dimensions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ImageElementConfig"]
        [::core::mem::size_of::<Clay_ImageElementConfig>() - 16usize];
    ["Alignment of Clay_ImageElementConfig"]
        [::core::mem::align_of::<Clay_ImageElementConfig>() - 8usize];
    ["Offset of field: Clay_ImageElementConfig::imageData"]
        [::core::mem::offset_of!(Clay_ImageElementConfig, imageData) - 0usize];
    ["Offset of field: Clay_ImageElementConfig::sourceDimensions"]
        [::core::mem::offset_of!(Clay_ImageElementConfig, sourceDimensions) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ImageElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ImageElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ImageElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_ImageElementConfig>() - 24usize];
    ["Alignment of Clay__AlignClay_ImageElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_ImageElementConfig>() - 8usize];
    ["Offset of field: Clay__AlignClay_ImageElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ImageElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ImageElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ImageElementConfig, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ImageElementConfigWrapper {
    pub wrapped: Clay_ImageElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ImageElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_ImageElementConfigWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ImageElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_ImageElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ImageElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ImageElementConfigWrapper, wrapped) - 0usize];
};
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_TOP: Clay_FloatingAttachPointType = 0;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_CENTER: Clay_FloatingAttachPointType =
    1;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_BOTTOM: Clay_FloatingAttachPointType =
    2;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_TOP: Clay_FloatingAttachPointType =
    3;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_CENTER:
    Clay_FloatingAttachPointType = 4;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_BOTTOM:
    Clay_FloatingAttachPointType = 5;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_TOP: Clay_FloatingAttachPointType =
    6;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_CENTER:
    Clay_FloatingAttachPointType = 7;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_BOTTOM:
    Clay_FloatingAttachPointType = 8;
pub type Clay_FloatingAttachPointType = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_FloatingAttachPointType {
    pub c: ::core::ffi::c_char,
    pub x: Clay_FloatingAttachPointType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_FloatingAttachPointType"]
        [::core::mem::size_of::<Clay__AlignClay_FloatingAttachPointType>() - 2usize];
    ["Alignment of Clay__AlignClay_FloatingAttachPointType"]
        [::core::mem::align_of::<Clay__AlignClay_FloatingAttachPointType>() - 1usize];
    ["Offset of field: Clay__AlignClay_FloatingAttachPointType::c"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingAttachPointType, c) - 0usize];
    ["Offset of field: Clay__AlignClay_FloatingAttachPointType::x"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingAttachPointType, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingAttachPointTypeWrapper {
    pub wrapped: Clay_FloatingAttachPointType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_FloatingAttachPointTypeWrapper"]
        [::core::mem::size_of::<Clay__Clay_FloatingAttachPointTypeWrapper>() - 1usize];
    ["Alignment of Clay__Clay_FloatingAttachPointTypeWrapper"]
        [::core::mem::align_of::<Clay__Clay_FloatingAttachPointTypeWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_FloatingAttachPointTypeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_FloatingAttachPointTypeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingAttachPoints {
    pub element: Clay_FloatingAttachPointType,
    pub parent: Clay_FloatingAttachPointType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingAttachPoints"]
        [::core::mem::size_of::<Clay_FloatingAttachPoints>() - 2usize];
    ["Alignment of Clay_FloatingAttachPoints"]
        [::core::mem::align_of::<Clay_FloatingAttachPoints>() - 1usize];
    ["Offset of field: Clay_FloatingAttachPoints::element"]
        [::core::mem::offset_of!(Clay_FloatingAttachPoints, element) - 0usize];
    ["Offset of field: Clay_FloatingAttachPoints::parent"]
        [::core::mem::offset_of!(Clay_FloatingAttachPoints, parent) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_FloatingAttachPoints {
    pub c: ::core::ffi::c_char,
    pub x: Clay_FloatingAttachPoints,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_FloatingAttachPoints"]
        [::core::mem::size_of::<Clay__AlignClay_FloatingAttachPoints>() - 3usize];
    ["Alignment of Clay__AlignClay_FloatingAttachPoints"]
        [::core::mem::align_of::<Clay__AlignClay_FloatingAttachPoints>() - 1usize];
    ["Offset of field: Clay__AlignClay_FloatingAttachPoints::c"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingAttachPoints, c) - 0usize];
    ["Offset of field: Clay__AlignClay_FloatingAttachPoints::x"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingAttachPoints, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingAttachPointsWrapper {
    pub wrapped: Clay_FloatingAttachPoints,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_FloatingAttachPointsWrapper"]
        [::core::mem::size_of::<Clay__Clay_FloatingAttachPointsWrapper>() - 2usize];
    ["Alignment of Clay__Clay_FloatingAttachPointsWrapper"]
        [::core::mem::align_of::<Clay__Clay_FloatingAttachPointsWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_FloatingAttachPointsWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_FloatingAttachPointsWrapper, wrapped) - 0usize];
};
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_CAPTURE: Clay_PointerCaptureMode = 0;
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH: Clay_PointerCaptureMode =
    1;
pub type Clay_PointerCaptureMode = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_PointerCaptureMode {
    pub c: ::core::ffi::c_char,
    pub x: Clay_PointerCaptureMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_PointerCaptureMode"]
        [::core::mem::size_of::<Clay__AlignClay_PointerCaptureMode>() - 8usize];
    ["Alignment of Clay__AlignClay_PointerCaptureMode"]
        [::core::mem::align_of::<Clay__AlignClay_PointerCaptureMode>() - 4usize];
    ["Offset of field: Clay__AlignClay_PointerCaptureMode::c"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerCaptureMode, c) - 0usize];
    ["Offset of field: Clay__AlignClay_PointerCaptureMode::x"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerCaptureMode, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_PointerCaptureModeWrapper {
    pub wrapped: Clay_PointerCaptureMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PointerCaptureModeWrapper"]
        [::core::mem::size_of::<Clay__Clay_PointerCaptureModeWrapper>() - 4usize];
    ["Alignment of Clay__Clay_PointerCaptureModeWrapper"]
        [::core::mem::align_of::<Clay__Clay_PointerCaptureModeWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_PointerCaptureModeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_PointerCaptureModeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingElementConfig {
    pub offset: Clay_Vector2,
    pub expand: Clay_Dimensions,
    pub zIndex: u16,
    pub parentId: u32,
    pub attachment: Clay_FloatingAttachPoints,
    pub pointerCaptureMode: Clay_PointerCaptureMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingElementConfig"]
        [::core::mem::size_of::<Clay_FloatingElementConfig>() - 32usize];
    ["Alignment of Clay_FloatingElementConfig"]
        [::core::mem::align_of::<Clay_FloatingElementConfig>() - 4usize];
    ["Offset of field: Clay_FloatingElementConfig::offset"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, offset) - 0usize];
    ["Offset of field: Clay_FloatingElementConfig::expand"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, expand) - 8usize];
    ["Offset of field: Clay_FloatingElementConfig::zIndex"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, zIndex) - 16usize];
    ["Offset of field: Clay_FloatingElementConfig::parentId"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, parentId) - 20usize];
    ["Offset of field: Clay_FloatingElementConfig::attachment"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, attachment) - 24usize];
    ["Offset of field: Clay_FloatingElementConfig::pointerCaptureMode"]
        [::core::mem::offset_of!(Clay_FloatingElementConfig, pointerCaptureMode) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_FloatingElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_FloatingElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_FloatingElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_FloatingElementConfig>() - 36usize];
    ["Alignment of Clay__AlignClay_FloatingElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_FloatingElementConfig>() - 4usize];
    ["Offset of field: Clay__AlignClay_FloatingElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_FloatingElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_FloatingElementConfig, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingElementConfigWrapper {
    pub wrapped: Clay_FloatingElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_FloatingElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_FloatingElementConfigWrapper>() - 32usize];
    ["Alignment of Clay__Clay_FloatingElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_FloatingElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_FloatingElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_FloatingElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomElementConfig {
    pub customData: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CustomElementConfig"]
        [::core::mem::size_of::<Clay_CustomElementConfig>() - 8usize];
    ["Alignment of Clay_CustomElementConfig"]
        [::core::mem::align_of::<Clay_CustomElementConfig>() - 8usize];
    ["Offset of field: Clay_CustomElementConfig::customData"]
        [::core::mem::offset_of!(Clay_CustomElementConfig, customData) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_CustomElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_CustomElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_CustomElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_CustomElementConfig>() - 16usize];
    ["Alignment of Clay__AlignClay_CustomElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_CustomElementConfig>() - 8usize];
    ["Offset of field: Clay__AlignClay_CustomElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_CustomElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_CustomElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_CustomElementConfig, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_CustomElementConfigWrapper {
    pub wrapped: Clay_CustomElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_CustomElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Alignment of Clay__Clay_CustomElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_CustomElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_CustomElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollElementConfig {
    pub horizontal: bool,
    pub vertical: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollElementConfig"]
        [::core::mem::size_of::<Clay_ScrollElementConfig>() - 2usize];
    ["Alignment of Clay_ScrollElementConfig"]
        [::core::mem::align_of::<Clay_ScrollElementConfig>() - 1usize];
    ["Offset of field: Clay_ScrollElementConfig::horizontal"]
        [::core::mem::offset_of!(Clay_ScrollElementConfig, horizontal) - 0usize];
    ["Offset of field: Clay_ScrollElementConfig::vertical"]
        [::core::mem::offset_of!(Clay_ScrollElementConfig, vertical) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ScrollElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ScrollElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ScrollElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_ScrollElementConfig>() - 3usize];
    ["Alignment of Clay__AlignClay_ScrollElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_ScrollElementConfig>() - 1usize];
    ["Offset of field: Clay__AlignClay_ScrollElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ScrollElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ScrollElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ScrollElementConfig, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ScrollElementConfigWrapper {
    pub wrapped: Clay_ScrollElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ScrollElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_ScrollElementConfigWrapper>() - 2usize];
    ["Alignment of Clay__Clay_ScrollElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_ScrollElementConfigWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_ScrollElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ScrollElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Border {
    pub width: u32,
    pub color: Clay_Color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Border"][::core::mem::size_of::<Clay_Border>() - 20usize];
    ["Alignment of Clay_Border"][::core::mem::align_of::<Clay_Border>() - 4usize];
    ["Offset of field: Clay_Border::width"][::core::mem::offset_of!(Clay_Border, width) - 0usize];
    ["Offset of field: Clay_Border::color"][::core::mem::offset_of!(Clay_Border, color) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_Border {
    pub c: ::core::ffi::c_char,
    pub x: Clay_Border,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_Border"][::core::mem::size_of::<Clay__AlignClay_Border>() - 24usize];
    ["Alignment of Clay__AlignClay_Border"]
        [::core::mem::align_of::<Clay__AlignClay_Border>() - 4usize];
    ["Offset of field: Clay__AlignClay_Border::c"]
        [::core::mem::offset_of!(Clay__AlignClay_Border, c) - 0usize];
    ["Offset of field: Clay__AlignClay_Border::x"]
        [::core::mem::offset_of!(Clay__AlignClay_Border, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_BorderWrapper {
    pub wrapped: Clay_Border,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_BorderWrapper"]
        [::core::mem::size_of::<Clay__Clay_BorderWrapper>() - 20usize];
    ["Alignment of Clay__Clay_BorderWrapper"]
        [::core::mem::align_of::<Clay__Clay_BorderWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_BorderWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_BorderWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BorderElementConfig {
    pub left: Clay_Border,
    pub right: Clay_Border,
    pub top: Clay_Border,
    pub bottom: Clay_Border,
    pub betweenChildren: Clay_Border,
    pub cornerRadius: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderElementConfig"]
        [::core::mem::size_of::<Clay_BorderElementConfig>() - 116usize];
    ["Alignment of Clay_BorderElementConfig"]
        [::core::mem::align_of::<Clay_BorderElementConfig>() - 4usize];
    ["Offset of field: Clay_BorderElementConfig::left"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, left) - 0usize];
    ["Offset of field: Clay_BorderElementConfig::right"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, right) - 20usize];
    ["Offset of field: Clay_BorderElementConfig::top"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, top) - 40usize];
    ["Offset of field: Clay_BorderElementConfig::bottom"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, bottom) - 60usize];
    ["Offset of field: Clay_BorderElementConfig::betweenChildren"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, betweenChildren) - 80usize];
    ["Offset of field: Clay_BorderElementConfig::cornerRadius"]
        [::core::mem::offset_of!(Clay_BorderElementConfig, cornerRadius) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_BorderElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_BorderElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_BorderElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_BorderElementConfig>() - 120usize];
    ["Alignment of Clay__AlignClay_BorderElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_BorderElementConfig>() - 4usize];
    ["Offset of field: Clay__AlignClay_BorderElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_BorderElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_BorderElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_BorderElementConfig, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_BorderElementConfigWrapper {
    pub wrapped: Clay_BorderElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_BorderElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_BorderElementConfigWrapper>() - 116usize];
    ["Alignment of Clay__Clay_BorderElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_BorderElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_BorderElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_BorderElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_ElementConfigUnion {
    pub rectangleElementConfig: *mut Clay_RectangleElementConfig,
    pub textElementConfig: *mut Clay_TextElementConfig,
    pub imageElementConfig: *mut Clay_ImageElementConfig,
    pub floatingElementConfig: *mut Clay_FloatingElementConfig,
    pub customElementConfig: *mut Clay_CustomElementConfig,
    pub scrollElementConfig: *mut Clay_ScrollElementConfig,
    pub borderElementConfig: *mut Clay_BorderElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementConfigUnion"][::core::mem::size_of::<Clay_ElementConfigUnion>() - 8usize];
    ["Alignment of Clay_ElementConfigUnion"]
        [::core::mem::align_of::<Clay_ElementConfigUnion>() - 8usize];
    ["Offset of field: Clay_ElementConfigUnion::rectangleElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, rectangleElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::textElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, textElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::imageElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, imageElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::floatingElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, floatingElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::customElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, customElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::scrollElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, scrollElementConfig) - 0usize];
    ["Offset of field: Clay_ElementConfigUnion::borderElementConfig"]
        [::core::mem::offset_of!(Clay_ElementConfigUnion, borderElementConfig) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_ElementConfigUnion {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ElementConfigUnion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ElementConfigUnion"]
        [::core::mem::size_of::<Clay__AlignClay_ElementConfigUnion>() - 16usize];
    ["Alignment of Clay__AlignClay_ElementConfigUnion"]
        [::core::mem::align_of::<Clay__AlignClay_ElementConfigUnion>() - 8usize];
    ["Offset of field: Clay__AlignClay_ElementConfigUnion::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementConfigUnion, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ElementConfigUnion::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementConfigUnion, x) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_ElementConfigUnionWrapper {
    pub wrapped: Clay_ElementConfigUnion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementConfigUnionWrapper"]
        [::core::mem::size_of::<Clay__Clay_ElementConfigUnionWrapper>() - 8usize];
    ["Alignment of Clay__Clay_ElementConfigUnionWrapper"]
        [::core::mem::align_of::<Clay__Clay_ElementConfigUnionWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ElementConfigUnionWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ElementConfigUnionWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_ElementConfig {
    pub type_: Clay__ElementConfigType,
    pub config: Clay_ElementConfigUnion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementConfig"][::core::mem::size_of::<Clay_ElementConfig>() - 16usize];
    ["Alignment of Clay_ElementConfig"][::core::mem::align_of::<Clay_ElementConfig>() - 8usize];
    ["Offset of field: Clay_ElementConfig::type_"]
        [::core::mem::offset_of!(Clay_ElementConfig, type_) - 0usize];
    ["Offset of field: Clay_ElementConfig::config"]
        [::core::mem::offset_of!(Clay_ElementConfig, config) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_ElementConfig {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ElementConfig"]
        [::core::mem::size_of::<Clay__AlignClay_ElementConfig>() - 24usize];
    ["Alignment of Clay__AlignClay_ElementConfig"]
        [::core::mem::align_of::<Clay__AlignClay_ElementConfig>() - 8usize];
    ["Offset of field: Clay__AlignClay_ElementConfig::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementConfig, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ElementConfig::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementConfig, x) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_ElementConfigWrapper {
    pub wrapped: Clay_ElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementConfigWrapper"]
        [::core::mem::size_of::<Clay__Clay_ElementConfigWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ElementConfigWrapper"]
        [::core::mem::align_of::<Clay__Clay_ElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ElementConfigWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollContainerData {
    pub scrollPosition: *mut Clay_Vector2,
    pub scrollContainerDimensions: Clay_Dimensions,
    pub contentDimensions: Clay_Dimensions,
    pub config: Clay_ScrollElementConfig,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollContainerData"]
        [::core::mem::size_of::<Clay_ScrollContainerData>() - 32usize];
    ["Alignment of Clay_ScrollContainerData"]
        [::core::mem::align_of::<Clay_ScrollContainerData>() - 8usize];
    ["Offset of field: Clay_ScrollContainerData::scrollPosition"]
        [::core::mem::offset_of!(Clay_ScrollContainerData, scrollPosition) - 0usize];
    ["Offset of field: Clay_ScrollContainerData::scrollContainerDimensions"]
        [::core::mem::offset_of!(Clay_ScrollContainerData, scrollContainerDimensions) - 8usize];
    ["Offset of field: Clay_ScrollContainerData::contentDimensions"]
        [::core::mem::offset_of!(Clay_ScrollContainerData, contentDimensions) - 16usize];
    ["Offset of field: Clay_ScrollContainerData::config"]
        [::core::mem::offset_of!(Clay_ScrollContainerData, config) - 24usize];
    ["Offset of field: Clay_ScrollContainerData::found"]
        [::core::mem::offset_of!(Clay_ScrollContainerData, found) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ScrollContainerData {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ScrollContainerData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ScrollContainerData"]
        [::core::mem::size_of::<Clay__AlignClay_ScrollContainerData>() - 40usize];
    ["Alignment of Clay__AlignClay_ScrollContainerData"]
        [::core::mem::align_of::<Clay__AlignClay_ScrollContainerData>() - 8usize];
    ["Offset of field: Clay__AlignClay_ScrollContainerData::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ScrollContainerData, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ScrollContainerData::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ScrollContainerData, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ScrollContainerDataWrapper {
    pub wrapped: Clay_ScrollContainerData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ScrollContainerDataWrapper"]
        [::core::mem::size_of::<Clay__Clay_ScrollContainerDataWrapper>() - 32usize];
    ["Alignment of Clay__Clay_ScrollContainerDataWrapper"]
        [::core::mem::align_of::<Clay__Clay_ScrollContainerDataWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ScrollContainerDataWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ScrollContainerDataWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementData {
    pub boundingBox: Clay_BoundingBox,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementData"][::core::mem::size_of::<Clay_ElementData>() - 20usize];
    ["Alignment of Clay_ElementData"][::core::mem::align_of::<Clay_ElementData>() - 4usize];
    ["Offset of field: Clay_ElementData::boundingBox"]
        [::core::mem::offset_of!(Clay_ElementData, boundingBox) - 0usize];
    ["Offset of field: Clay_ElementData::found"]
        [::core::mem::offset_of!(Clay_ElementData, found) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ElementData {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ElementData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ElementData"]
        [::core::mem::size_of::<Clay__AlignClay_ElementData>() - 24usize];
    ["Alignment of Clay__AlignClay_ElementData"]
        [::core::mem::align_of::<Clay__AlignClay_ElementData>() - 4usize];
    ["Offset of field: Clay__AlignClay_ElementData::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementData, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ElementData::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ElementData, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ElementDataWrapper {
    pub wrapped: Clay_ElementData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementDataWrapper"]
        [::core::mem::size_of::<Clay__Clay_ElementDataWrapper>() - 20usize];
    ["Alignment of Clay__Clay_ElementDataWrapper"]
        [::core::mem::align_of::<Clay__Clay_ElementDataWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_ElementDataWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ElementDataWrapper, wrapped) - 0usize];
};
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_NONE: Clay_RenderCommandType = 0;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_RECTANGLE: Clay_RenderCommandType = 1;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_BORDER: Clay_RenderCommandType = 2;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_TEXT: Clay_RenderCommandType = 3;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_IMAGE: Clay_RenderCommandType = 4;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_START: Clay_RenderCommandType = 5;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_END: Clay_RenderCommandType = 6;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_CUSTOM: Clay_RenderCommandType = 7;
pub type Clay_RenderCommandType = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_RenderCommandType {
    pub c: ::core::ffi::c_char,
    pub x: Clay_RenderCommandType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_RenderCommandType"]
        [::core::mem::size_of::<Clay__AlignClay_RenderCommandType>() - 2usize];
    ["Alignment of Clay__AlignClay_RenderCommandType"]
        [::core::mem::align_of::<Clay__AlignClay_RenderCommandType>() - 1usize];
    ["Offset of field: Clay__AlignClay_RenderCommandType::c"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommandType, c) - 0usize];
    ["Offset of field: Clay__AlignClay_RenderCommandType::x"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommandType, x) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_RenderCommandTypeWrapper {
    pub wrapped: Clay_RenderCommandType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_RenderCommandTypeWrapper"]
        [::core::mem::size_of::<Clay__Clay_RenderCommandTypeWrapper>() - 1usize];
    ["Alignment of Clay__Clay_RenderCommandTypeWrapper"]
        [::core::mem::align_of::<Clay__Clay_RenderCommandTypeWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_RenderCommandTypeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_RenderCommandTypeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_RenderCommand {
    pub boundingBox: Clay_BoundingBox,
    pub config: Clay_ElementConfigUnion,
    pub text: Clay_String,
    pub id: u32,
    pub commandType: Clay_RenderCommandType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommand"][::core::mem::size_of::<Clay_RenderCommand>() - 48usize];
    ["Alignment of Clay_RenderCommand"][::core::mem::align_of::<Clay_RenderCommand>() - 8usize];
    ["Offset of field: Clay_RenderCommand::boundingBox"]
        [::core::mem::offset_of!(Clay_RenderCommand, boundingBox) - 0usize];
    ["Offset of field: Clay_RenderCommand::config"]
        [::core::mem::offset_of!(Clay_RenderCommand, config) - 16usize];
    ["Offset of field: Clay_RenderCommand::text"]
        [::core::mem::offset_of!(Clay_RenderCommand, text) - 24usize];
    ["Offset of field: Clay_RenderCommand::id"]
        [::core::mem::offset_of!(Clay_RenderCommand, id) - 40usize];
    ["Offset of field: Clay_RenderCommand::commandType"]
        [::core::mem::offset_of!(Clay_RenderCommand, commandType) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__AlignClay_RenderCommand {
    pub c: ::core::ffi::c_char,
    pub x: Clay_RenderCommand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_RenderCommand"]
        [::core::mem::size_of::<Clay__AlignClay_RenderCommand>() - 56usize];
    ["Alignment of Clay__AlignClay_RenderCommand"]
        [::core::mem::align_of::<Clay__AlignClay_RenderCommand>() - 8usize];
    ["Offset of field: Clay__AlignClay_RenderCommand::c"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommand, c) - 0usize];
    ["Offset of field: Clay__AlignClay_RenderCommand::x"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommand, x) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_RenderCommandWrapper {
    pub wrapped: Clay_RenderCommand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_RenderCommandWrapper"]
        [::core::mem::size_of::<Clay__Clay_RenderCommandWrapper>() - 48usize];
    ["Alignment of Clay__Clay_RenderCommandWrapper"]
        [::core::mem::align_of::<Clay__Clay_RenderCommandWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_RenderCommandWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_RenderCommandWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RenderCommandArray {
    pub capacity: i32,
    pub length: i32,
    pub internalArray: *mut Clay_RenderCommand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommandArray"]
        [::core::mem::size_of::<Clay_RenderCommandArray>() - 16usize];
    ["Alignment of Clay_RenderCommandArray"]
        [::core::mem::align_of::<Clay_RenderCommandArray>() - 8usize];
    ["Offset of field: Clay_RenderCommandArray::capacity"]
        [::core::mem::offset_of!(Clay_RenderCommandArray, capacity) - 0usize];
    ["Offset of field: Clay_RenderCommandArray::length"]
        [::core::mem::offset_of!(Clay_RenderCommandArray, length) - 4usize];
    ["Offset of field: Clay_RenderCommandArray::internalArray"]
        [::core::mem::offset_of!(Clay_RenderCommandArray, internalArray) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_RenderCommandArray {
    pub c: ::core::ffi::c_char,
    pub x: Clay_RenderCommandArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_RenderCommandArray"]
        [::core::mem::size_of::<Clay__AlignClay_RenderCommandArray>() - 24usize];
    ["Alignment of Clay__AlignClay_RenderCommandArray"]
        [::core::mem::align_of::<Clay__AlignClay_RenderCommandArray>() - 8usize];
    ["Offset of field: Clay__AlignClay_RenderCommandArray::c"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommandArray, c) - 0usize];
    ["Offset of field: Clay__AlignClay_RenderCommandArray::x"]
        [::core::mem::offset_of!(Clay__AlignClay_RenderCommandArray, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_RenderCommandArrayWrapper {
    pub wrapped: Clay_RenderCommandArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_RenderCommandArrayWrapper"]
        [::core::mem::size_of::<Clay__Clay_RenderCommandArrayWrapper>() - 16usize];
    ["Alignment of Clay__Clay_RenderCommandArrayWrapper"]
        [::core::mem::align_of::<Clay__Clay_RenderCommandArrayWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_RenderCommandArrayWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_RenderCommandArrayWrapper, wrapped) - 0usize];
};
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED_THIS_FRAME:
    Clay_PointerDataInteractionState = 0;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED:
    Clay_PointerDataInteractionState = 1;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED_THIS_FRAME:
    Clay_PointerDataInteractionState = 2;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED:
    Clay_PointerDataInteractionState = 3;
pub type Clay_PointerDataInteractionState = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_PointerDataInteractionState {
    pub c: ::core::ffi::c_char,
    pub x: Clay_PointerDataInteractionState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_PointerDataInteractionState"]
        [::core::mem::size_of::<Clay__AlignClay_PointerDataInteractionState>() - 8usize];
    ["Alignment of Clay__AlignClay_PointerDataInteractionState"]
        [::core::mem::align_of::<Clay__AlignClay_PointerDataInteractionState>() - 4usize];
    ["Offset of field: Clay__AlignClay_PointerDataInteractionState::c"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerDataInteractionState, c) - 0usize];
    ["Offset of field: Clay__AlignClay_PointerDataInteractionState::x"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerDataInteractionState, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_PointerDataInteractionStateWrapper {
    pub wrapped: Clay_PointerDataInteractionState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PointerDataInteractionStateWrapper"]
        [::core::mem::size_of::<Clay__Clay_PointerDataInteractionStateWrapper>() - 4usize];
    ["Alignment of Clay__Clay_PointerDataInteractionStateWrapper"]
        [::core::mem::align_of::<Clay__Clay_PointerDataInteractionStateWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_PointerDataInteractionStateWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_PointerDataInteractionStateWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_PointerData {
    pub position: Clay_Vector2,
    pub state: Clay_PointerDataInteractionState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_PointerData"][::core::mem::size_of::<Clay_PointerData>() - 12usize];
    ["Alignment of Clay_PointerData"][::core::mem::align_of::<Clay_PointerData>() - 4usize];
    ["Offset of field: Clay_PointerData::position"]
        [::core::mem::offset_of!(Clay_PointerData, position) - 0usize];
    ["Offset of field: Clay_PointerData::state"]
        [::core::mem::offset_of!(Clay_PointerData, state) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_PointerData {
    pub c: ::core::ffi::c_char,
    pub x: Clay_PointerData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_PointerData"]
        [::core::mem::size_of::<Clay__AlignClay_PointerData>() - 16usize];
    ["Alignment of Clay__AlignClay_PointerData"]
        [::core::mem::align_of::<Clay__AlignClay_PointerData>() - 4usize];
    ["Offset of field: Clay__AlignClay_PointerData::c"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerData, c) - 0usize];
    ["Offset of field: Clay__AlignClay_PointerData::x"]
        [::core::mem::offset_of!(Clay__AlignClay_PointerData, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_PointerDataWrapper {
    pub wrapped: Clay_PointerData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PointerDataWrapper"]
        [::core::mem::size_of::<Clay__Clay_PointerDataWrapper>() - 12usize];
    ["Alignment of Clay__Clay_PointerDataWrapper"]
        [::core::mem::align_of::<Clay__Clay_PointerDataWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_PointerDataWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_PointerDataWrapper, wrapped) - 0usize];
};
pub const Clay_ErrorType_CLAY_ERROR_TYPE_TEXT_MEASUREMENT_FUNCTION_NOT_PROVIDED: Clay_ErrorType = 0;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_ARENA_CAPACITY_EXCEEDED: Clay_ErrorType = 1;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_ELEMENTS_CAPACITY_EXCEEDED: Clay_ErrorType = 2;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_TEXT_MEASUREMENT_CAPACITY_EXCEEDED: Clay_ErrorType = 3;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_DUPLICATE_ID: Clay_ErrorType = 4;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_FLOATING_CONTAINER_PARENT_NOT_FOUND: Clay_ErrorType = 5;
pub const Clay_ErrorType_CLAY_ERROR_TYPE_INTERNAL_ERROR: Clay_ErrorType = 6;
pub type Clay_ErrorType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ErrorType {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ErrorType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ErrorType"]
        [::core::mem::size_of::<Clay__AlignClay_ErrorType>() - 8usize];
    ["Alignment of Clay__AlignClay_ErrorType"]
        [::core::mem::align_of::<Clay__AlignClay_ErrorType>() - 4usize];
    ["Offset of field: Clay__AlignClay_ErrorType::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorType, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ErrorType::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorType, x) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ErrorTypeWrapper {
    pub wrapped: Clay_ErrorType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ErrorTypeWrapper"]
        [::core::mem::size_of::<Clay__Clay_ErrorTypeWrapper>() - 4usize];
    ["Alignment of Clay__Clay_ErrorTypeWrapper"]
        [::core::mem::align_of::<Clay__Clay_ErrorTypeWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_ErrorTypeWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ErrorTypeWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorData {
    pub errorType: Clay_ErrorType,
    pub errorText: Clay_String,
    pub userData: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorData"][::core::mem::size_of::<Clay_ErrorData>() - 32usize];
    ["Alignment of Clay_ErrorData"][::core::mem::align_of::<Clay_ErrorData>() - 8usize];
    ["Offset of field: Clay_ErrorData::errorType"]
        [::core::mem::offset_of!(Clay_ErrorData, errorType) - 0usize];
    ["Offset of field: Clay_ErrorData::errorText"]
        [::core::mem::offset_of!(Clay_ErrorData, errorText) - 8usize];
    ["Offset of field: Clay_ErrorData::userData"]
        [::core::mem::offset_of!(Clay_ErrorData, userData) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ErrorData {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ErrorData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ErrorData"]
        [::core::mem::size_of::<Clay__AlignClay_ErrorData>() - 40usize];
    ["Alignment of Clay__AlignClay_ErrorData"]
        [::core::mem::align_of::<Clay__AlignClay_ErrorData>() - 8usize];
    ["Offset of field: Clay__AlignClay_ErrorData::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorData, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ErrorData::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorData, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ErrorDataWrapper {
    pub wrapped: Clay_ErrorData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ErrorDataWrapper"]
        [::core::mem::size_of::<Clay__Clay_ErrorDataWrapper>() - 32usize];
    ["Alignment of Clay__Clay_ErrorDataWrapper"]
        [::core::mem::align_of::<Clay__Clay_ErrorDataWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ErrorDataWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ErrorDataWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorHandler {
    pub errorHandlerFunction:
        ::core::option::Option<unsafe extern "C" fn(errorText: Clay_ErrorData)>,
    pub userData: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorHandler"][::core::mem::size_of::<Clay_ErrorHandler>() - 16usize];
    ["Alignment of Clay_ErrorHandler"][::core::mem::align_of::<Clay_ErrorHandler>() - 8usize];
    ["Offset of field: Clay_ErrorHandler::errorHandlerFunction"]
        [::core::mem::offset_of!(Clay_ErrorHandler, errorHandlerFunction) - 0usize];
    ["Offset of field: Clay_ErrorHandler::userData"]
        [::core::mem::offset_of!(Clay_ErrorHandler, userData) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__AlignClay_ErrorHandler {
    pub c: ::core::ffi::c_char,
    pub x: Clay_ErrorHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__AlignClay_ErrorHandler"]
        [::core::mem::size_of::<Clay__AlignClay_ErrorHandler>() - 24usize];
    ["Alignment of Clay__AlignClay_ErrorHandler"]
        [::core::mem::align_of::<Clay__AlignClay_ErrorHandler>() - 8usize];
    ["Offset of field: Clay__AlignClay_ErrorHandler::c"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorHandler, c) - 0usize];
    ["Offset of field: Clay__AlignClay_ErrorHandler::x"]
        [::core::mem::offset_of!(Clay__AlignClay_ErrorHandler, x) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ErrorHandlerWrapper {
    pub wrapped: Clay_ErrorHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ErrorHandlerWrapper"]
        [::core::mem::size_of::<Clay__Clay_ErrorHandlerWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ErrorHandlerWrapper"]
        [::core::mem::align_of::<Clay__Clay_ErrorHandlerWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ErrorHandlerWrapper::wrapped"]
        [::core::mem::offset_of!(Clay__Clay_ErrorHandlerWrapper, wrapped) - 0usize];
};
unsafe extern "C" {
    pub fn Clay_MinMemorySize() -> u32;
}
unsafe extern "C" {
    pub fn Clay_CreateArenaWithCapacityAndMemory(
        capacity: u32,
        offset: *mut ::core::ffi::c_void,
    ) -> Clay_Arena;
}
unsafe extern "C" {
    pub fn Clay_SetPointerState(position: Clay_Vector2, pointerDown: bool);
}
unsafe extern "C" {
    pub fn Clay_Initialize(
        arena: Clay_Arena,
        layoutDimensions: Clay_Dimensions,
        errorHandler: Clay_ErrorHandler,
    ) -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_GetCurrentContext() -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_SetCurrentContext(context: *mut Clay_Context);
}
unsafe extern "C" {
    pub fn Clay_UpdateScrollContainers(
        enableDragScrolling: bool,
        scrollDelta: Clay_Vector2,
        deltaTime: f32,
    );
}
unsafe extern "C" {
    pub fn Clay_SetLayoutDimensions(dimensions: Clay_Dimensions);
}
unsafe extern "C" {
    pub fn Clay_BeginLayout();
}
unsafe extern "C" {
    pub fn Clay_EndLayout() -> Clay_RenderCommandArray;
}
unsafe extern "C" {
    pub fn Clay_GetElementId(idString: Clay_String) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementIdWithIndex(idString: Clay_String, index: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementData(id: Clay_ElementId) -> Clay_ElementData;
}
unsafe extern "C" {
    pub fn Clay_Hovered() -> bool;
}
unsafe extern "C" {
    pub fn Clay_OnHover(
        onHoverFunction: ::core::option::Option<
            unsafe extern "C" fn(
                elementId: Clay_ElementId,
                pointerData: Clay_PointerData,
                userData: isize,
            ),
        >,
        userData: isize,
    );
}
unsafe extern "C" {
    pub fn Clay_PointerOver(elementId: Clay_ElementId) -> bool;
}
unsafe extern "C" {
    pub fn Clay_GetScrollContainerData(id: Clay_ElementId) -> Clay_ScrollContainerData;
}
unsafe extern "C" {
    pub fn Clay_SetMeasureTextFunction(
        measureTextFunction: ::core::option::Option<
            unsafe extern "C" fn(
                text: Clay_StringSlice,
                config: *mut Clay_TextElementConfig,
                userData: usize,
            ) -> Clay_Dimensions,
        >,
        userData: usize,
    );
}
unsafe extern "C" {
    pub fn Clay_SetQueryScrollOffsetFunction(
        queryScrollOffsetFunction: ::core::option::Option<
            unsafe extern "C" fn(elementId: u32, userData: usize) -> Clay_Vector2,
        >,
        userData: usize,
    );
}
unsafe extern "C" {
    pub fn Clay_RenderCommandArray_Get(
        array: *mut Clay_RenderCommandArray,
        index: i32,
    ) -> *mut Clay_RenderCommand;
}
unsafe extern "C" {
    pub fn Clay_SetDebugModeEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_IsDebugModeEnabled() -> bool;
}
unsafe extern "C" {
    pub fn Clay_SetCullingEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_GetMaxElementCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxElementCount(maxElementCount: i32);
}
unsafe extern "C" {
    pub fn Clay_GetMaxMeasureTextCacheWordCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxMeasureTextCacheWordCount(maxMeasureTextCacheWordCount: i32);
}
unsafe extern "C" {
    pub fn Clay_ResetMeasureTextCache();
}
unsafe extern "C" {
    pub fn Clay__OpenElement();
}
unsafe extern "C" {
    pub fn Clay__CloseElement();
}
unsafe extern "C" {
    pub fn Clay__StoreLayoutConfig(config: Clay_LayoutConfig) -> *mut Clay_LayoutConfig;
}
unsafe extern "C" {
    pub fn Clay__ElementPostConfiguration();
}
unsafe extern "C" {
    pub fn Clay__AttachId(id: Clay_ElementId);
}
unsafe extern "C" {
    pub fn Clay__AttachLayoutConfig(config: *mut Clay_LayoutConfig);
}
unsafe extern "C" {
    pub fn Clay__AttachElementConfig(
        config: Clay_ElementConfigUnion,
        type_: Clay__ElementConfigType,
    );
}
unsafe extern "C" {
    pub fn Clay__StoreRectangleElementConfig(
        config: Clay_RectangleElementConfig,
    ) -> *mut Clay_RectangleElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreTextElementConfig(
        config: Clay_TextElementConfig,
    ) -> *mut Clay_TextElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreImageElementConfig(
        config: Clay_ImageElementConfig,
    ) -> *mut Clay_ImageElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreFloatingElementConfig(
        config: Clay_FloatingElementConfig,
    ) -> *mut Clay_FloatingElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreCustomElementConfig(
        config: Clay_CustomElementConfig,
    ) -> *mut Clay_CustomElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreScrollElementConfig(
        config: Clay_ScrollElementConfig,
    ) -> *mut Clay_ScrollElementConfig;
}
unsafe extern "C" {
    pub fn Clay__StoreBorderElementConfig(
        config: Clay_BorderElementConfig,
    ) -> *mut Clay_BorderElementConfig;
}
unsafe extern "C" {
    pub fn Clay__HashString(key: Clay_String, offset: u32, seed: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay__OpenTextElement(text: Clay_String, textConfig: *mut Clay_TextElementConfig);
}
unsafe extern "C" {
    pub fn Clay__GetParentElementId() -> u32;
}
unsafe extern "C" {
    pub static mut Clay__debugViewHighlightColor: Clay_Color;
}
unsafe extern "C" {
    pub static mut Clay__debugViewWidth: u32;
}
